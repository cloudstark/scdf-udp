name: master

on:
  push:
    branches:
      - 'master'
#    paths:
#      - '**/src/**'
#      - '**/pom.xml'

env:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

jobs:
  check-version:
    name: check SNAPSHOT version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Export project version
        uses: ./.github/actions/export-project-version
      - name: Check version is SNAPSHOT
        run: |
          echo $PROJECT_VERSION | egrep '^([0-9]+\.){1,2}([0-9]+(-SNAPSHOT))?$'

  install:
    name: install
    runs-on: ubuntu-latest
    needs: check-version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Java 1.8
        uses: joschi/setup-jdk@v1.0.0
        with:
          java-version: 'openjdk8'
      - name: Setup cache
        uses: actions/cache@v1
        with:
          path: .m2/repository/
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Install dependencies
        id: install
        run: mvn $MVN_CLI_OPTS install
      - name: Rocket.Chat Notification
        uses: RocketChat/Rocket.Chat.GitHub.Action.Notification@master
        if: failure()
        with:
          type: ${{ job.status }}
          job_name: '*Install dependencies*'
          mention: 'here'
          mention_if: 'failure'
          url: ${{ secrets.ROCKETCHAT_WEBHOOK }}

  build:
    name: "Build apps and images"
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Export project version
        uses: ./.github/actions/export-project-version
      - name: Setup Java 1.8
        uses: joschi/setup-jdk@v1.0.0
        with:
          java-version: 'openjdk8'
      - name: Setup cache
        uses: actions/cache@v1
        with:
          path: .m2/repository/
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build the docker images
        run: |
          mvn $MAVEN_CLI_OPTS install -DskipTests -Pspring -PgenerateApps
          mvn $MAVEN_CLI_OPTS -f apps/pom.xml package docker:build -DskipTests -Pspring
      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Retag images
        run: |
          docker tag springcloudstream/udp-source-kafka:${{ env.PROJECT_VERSION }} cloudstark/scdf-udp-source-kafka:latest
          docker tag springcloudstream/udp-source-rabbit:${{ env.PROJECT_VERSION }} cloudstark/scdf-udp-source-rabbit:latest
          docker tag springcloudstream/udp-sink-kafka:${{ env.PROJECT_VERSION }} cloudstark/scdf-udp-sink-kafka:latest
          docker tag springcloudstream/udp-sink-rabbit:${{ env.PROJECT_VERSION }} cloudstark/scdf-udp-sink-rabbit:latest
      - name: Push images
        run: |
          docker push cloudstark/scdf-udp-source-kafka:latest
          docker push cloudstark/scdf-udp-source-rabbit:latest
          docker push cloudstark/scdf-udp-sink-kafka:latest
          docker push cloudstark/scdf-udp-sink-rabbit:latest
